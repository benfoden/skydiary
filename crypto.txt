Encryption Strategy for Robust User Data Privacy (from the business) and Security (from third parties)


Notes
  All transfers between client and server are protected with TLS
  Web Crypto API (subtle) is used for generating all symmetric (AES-GCM) and assymetric (RSA-OAEP) key pairs
  Sessions expire after two weeks
  Long, strong passwords are required. The business can't see them. They can't be reset, only updated by providing the original password (all on the client.)
  The user is suggested multiple backup methods for their password
  The DB on the server side is encrypted at rest
  The local indexedDB on the client side is encrypted at rest
  All exchanges except for initial public key exchange are encrypted with assymetric keys
  CD is the client device, S is the server (or serverless function etc)

New user sign up
  CD: new user authenticates for first time with TOTP
  S: session is opened, keypair S is generated, public key S sent to client
  S: private key S is added to user record, updated in DB
  CD: session keypair A1 is generated, public key A1 sent to server
  CD & S: shared secrets are derived from each other's public and private keys, then compared to ensure match, else error is thrown
  CD & S: all data transferred to/from server after this step is encrypted/decrypted with keypair A1 and keypair S, any errors are thrown
  CD: private key A1 and public key S are saved in jwk format in local IndexedDB
User sets a password
  CD: on /settings page the user enters a data password and is prompted to save it securely in a password manager or otherwise save a copy
  CD: a random uint8Array(16) salts is generated: SUKs
  CD: Argon2 is used to derive secret user key (SUK) from data password and SUKs
  CD: master data key is generated (MDK), saved in jwk format in local IndexedDB
  CD: SUK is used to encrypt MDK, resulting in SUK-MDK
  S: SUK-MDK, SUKs are added to user record, updated in DB
  S: new device A record with UUID, device A metadata, userID,and public key A1 is created in DB
  CD: user is ready to securely use the service for duration of their session

Secure handling of user generated content
  CD: user types new plain text (any user-generated content)
  CD: new plain text is encrypted with MDK
  S: new MDK-encrypted cipher text is created in DB
  CD: user requests some cipher text from server
  S: cipher text is sent to the client
  CD: cipher text is decrypted with MDK, then displayed in the UI

User logs out on device A
  CD: user logs out
  CD: all entries deleted from local IndexedDB
  S: session token is deleted

User logs back in on device A
  CD: user authenticates with TOTP
  CD: session keypair A2 is generated, public key A2 sent to server
  CD: private key A2 is saved in jwk format in local IndexedDB
  CD & S: shared secrets are derived from each other's public and private keys, then compared to ensure match
  CD & S: all data transferred to/from server after this step is encrypted/decrypted with keypair A2 and keypair S
  S: device A record with public key A2 is updated in db
  CD: user enters data password
  CD: SUKs, SUK-MDK are provided by the server in the active session user object context
  CD: data password and SUKs used to derive secret user key (SUK)
  CD: SUK is used to decrypt the SUK-MDK
  CD: SUK and MDK are saved in jwk format in local IndexedDB
  CD: user is ready to securely use the service for duration of their session


User logs in on a new device B
  CD: user authenticates with TOTP
  CD: keypair B1 is generated
  CD: private key B1 is saved in jwk format in local IndexedDB
  CD: user enters data password
  S: new device UUID, device B metadata, userID, and public key B1 are created in DB
  C & S: except for user generated content, all keys, metadata, etc. transferred to/from server from now on is encrypted/decrypted with keypair B1
  S: SUKs is decrypted with master salt key (loaded from env) and together with SUK-MDK, made available to client in active session user object context
  CD: data password and SUKs used to derive secret user key (SUK)
  CD: SUK-MDK is decrypted using SUK
  CD: SUK and MDK are saved in jwk format in local IndexedDB
  CD: user is ready to securely use the service for duration of their session


Revoking devices
  CD: user initiates device revocation
  S: device UUID row is deleted from the DB
  S: any active sessions for the revoked device are terminated
  CD: user is notified of successful revocation

