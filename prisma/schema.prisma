generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:../tmp/dev.db"
}

model Post {
  id             String    @id @default(cuid())
  title          String?
  content        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdById    String
  sentimentScore String?
  summary        String?
  comments       Comment[] @relation("PostComments")
  createdBy      User      @relation(fields: [createdById], references: [id])
  tags           Tag[]     @relation("PostTags")

  @@index([title])
}

model Tag {
  id          String   @id @default(cuid())
  content     String
  isSentiment Boolean  @default(false)
  createdAt   DateTime @default(now())
  post        Post[]   @relation("PostTags")
  user        User[]   @relation("UserTags")

  @@index([content])
}

model Comment {
  id                 String   @id @default(cuid())
  content            String
  isAI               Boolean  @default(true)
  createdByPersonaId String?
  createdAt          DateTime @default(now())
  coachVariant       String?
  coachName          String?
  postId             String
  post               Post     @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  createdByPersona   Persona? @relation(fields: [createdByPersonaId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  isSpecial     Boolean   @default(false)
  accounts      Account[]
  personas      Persona[]
  posts         Post[]
  sessions      Session[]
  tags          Tag[]     @relation("UserTags")
}

model Persona {
  id                  String    @id @default(cuid())
  name                String
  description         String?
  image               String?
  age                 Int?
  gender              String?
  relationship        String?
  occupation          String?
  traits              String
  communicationStyle  String?
  communicationSample String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  createdById         String
  comments            Comment[]
  isUser              Boolean   @default(false)
  createdBy           User      @relation(fields: [createdById], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
