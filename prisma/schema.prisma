generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:../tmp/dev.db"
}

model Post {
  id             String    @id @default(cuid())
  title          String?
  content        String
  contentIV      String?
  contentIVBytes Bytes?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdById    String
  sentimentScore String?
  summary        String?
  summaryIV      String?
  summaryIVBytes Bytes?
  comments       Comment[] @relation("PostComments")
  createdBy      User      @relation(fields: [createdById], references: [id])
  tags           Tag[]     @relation("PostTags")

  @@index([createdById])
}

model Tag {
  id          String   @id @default(cuid())
  content     String
  isSentiment Boolean  @default(false)
  createdAt   DateTime @default(now())
  post        Post[]   @relation("PostTags")
  user        User[]   @relation("UserTags")

  @@index([content])
}

model Comment {
  id                 String   @id @default(cuid())
  content            String
  contentIV          String?
  contentIVBytes     Bytes?
  isAI               Boolean  @default(true)
  createdByPersonaId String?
  createdAt          DateTime @default(now())
  coachVariant       String?
  coachName          String?
  coachNameIV        String?
  coachNameIVBytes   Bytes?
  postId             String
  post               Post     @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  createdByPersona   Persona? @relation(fields: [createdByPersonaId], references: [id])

  @@index([postId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String         @id @default(cuid())
  name                     String?
  email                    String?        @unique
  emailVerified            DateTime?
  image                    String?
  isAdmin                  Boolean        @default(false)
  isSpecial                Boolean        @default(false)
  stripeProductId          String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  stripeCustomerId         String?        @unique
  isWorkFocused            Boolean        @default(false)
  commentsUsed             Int?
  personasUsed             Int?
  memoryUsed               Int?
  resetAt                  DateTime?
  personas                 Persona[]
  posts                    Post[]
  blogPosts                BlogPost[]
  sessions                 Session[]
  tags                     Tag[]          @relation("UserTags")
  subscriptions            Subscription[] @relation("UserSubscriptions")
  devices                  Device[]       @relation("UserDevices")
  passwordSalt             String?
  sukMdk                   String?
  isNoPeekingMode          Boolean        @default(false)
}

model Device {
  id         String   @id @default(cuid())
  userId     String
  deviceName String
  osName     String
  osVersion  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  user User @relation("UserDevices", fields: [userId], references: [id])
}


model Persona {
  id                  String    @id @default(cuid())
  image               String?
  age                 Int?
  name                String
  nameIV              String?
  nameIVBytes         Bytes?
  description         String?
  descriptionIV       String?
  descriptionIVBytes  Bytes?
  gender              String?
  genderIV            String?
  genderIVBytes       Bytes?
  relationship        String?
  relationshipIV      String?
  relationshipIVBytes Bytes?
  occupation          String?
  occupationIV        String?
  occupationIVBytes   Bytes?
  traits              String
  traitsIV            String?
  traitsIVBytes       Bytes?
  communicationStyle  String?
  communicationStyleIV String?
  communicationStyleIVBytes Bytes?
  communicationSample String?
  communicationSampleIV String?
  communicationSampleIVBytes Bytes?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  createdById         String
  comments            Comment[]
  isFavorite          Boolean   @default(false)
  isUser              Boolean   @default(false)
  createdBy           User      @relation(fields: [createdById], references: [id])

  @@index([createdById])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String  @id
  active      Boolean
  name        String
  description String?
  image       String?
  metadata    String
  prices      Price[] @relation("ProductPrices")
}

model Price {
  id              String         @id
  product         Product        @relation(fields: [productId], references: [id], name: "ProductPrices")
  productId       String
  active          Boolean
  description     String?
  unitAmount      BigInt
  currency        String
  type            String
  interval        String
  intervalCount   Int
  trialPeriodDays Int?
  metadata        String
  subscriptions   Subscription[] @relation("PriceSubscriptions")
}

model Subscription {
  id                 String    @id
  user               User      @relation(fields: [userId], references: [id], name: "UserSubscriptions")
  userId             String
  status             String
  metadata           String
  price              Price     @relation(fields: [priceId], references: [id], name: "PriceSubscriptions")
  priceId            String
  quantity           Int
  cancelAtPeriodEnd  Boolean
  created            DateTime  @default(now())
  currentPeriodStart DateTime  @default(now())
  currentPeriodEnd   DateTime  @default(now())
  endedAt            DateTime?
  cancelAt           DateTime?
  canceledAt         DateTime?
  trialStart         DateTime?
  trialEnd           DateTime?
}

model Event {
  id        String   @id @default(cuid())
  type      String
  value     String?
  userId    String
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  content     String
  description String?
  tag         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  isDraft     Boolean  @default(true)
  urlStub     String?

  @@unique([urlStub])
}


// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }
